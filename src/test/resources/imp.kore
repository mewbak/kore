/* This is the complete Kore definition of imp.k.
 * For comparison, K definitions are replicated
 * as comments, followed by the corresponding
 * Kore definitions.
 */

[]

module BOOL

  sort Bool{} []

  symbol true{}() : Bool{} []

  symbol false{}() : Bool{} []

  symbol andBool{}(Bool{}, Bool{}) : Bool{} []

  symbol notBool{}(Bool{}) : Bool{} []

  /* Functional symbol axioms (one for each funcional symbol). */

  /* exists t . true = t
   * exists t . false = t
   * forall x y . exists t . andBool(x,y) = t
   * forall x . exists t . notBool(x) = t
   */

  axiom{R}
    \exists{R}(
      T:Bool{},
      \equals{Bool{},R}(
        true{}(),
        T:Bool{}))
  []

  axiom{R}
    \exists{R}(
      T:Bool{},
      \equals{Bool{},R}(
        false{}(),
        T:Bool{}))
  []


  axiom{R}
    \forall{R}(
      X:Bool{},
      \forall{R}(
        Y:Bool{},
        \exists{R}(
          T:Bool{},
          \equals{Bool{},R}(
            andBool{}(X:Bool{},Y:Bool{}),
            T:Bool{}))))
  []

  axiom{R}
    \forall{R}(
      X:Bool{},
      \exists{R}(
        T:Bool{},
        \equals{Bool{},R}(
          notBool{}(X:Bool{}),
          T:Bool{})))
  []

  /* Constructor axioms (See Matching Logic paper, Seciton 5.7)
   * http://fsl.cs.illinois.edu/index.php/Matching_logic
   *
   * (No Junk) true \/ false  --- this is saying a boolean is either
   *                          --- true or false
   *                          --- Note: _\/_ is the disjunction in ML
   * (No Confusion) not (true /\ false)
   *                          --- this is saying a boolean cannot be
   *                          --- both a true and a false.
   *                          --- Note: _/\_ is the conjunction in ML.
   *                          ---       It is not "andBool".
   */

  axiom{}
    \or{Bool{}}(true{}(), false{}())
  []

  axiom{}
    \not{Bool{}}(\and{Bool{}}(true{}(), false{}()))
  []

  /* Usual axioms about boolean operations:
   * andBool(true,T) = T
   * andBool(false,T) = false
   * notBool(true) = false
   * notBool(false) = true
   */

  axiom{R}
    \equals{Bool{},R}(
      andBool{}(true{}(), T:Bool{}),
      T:Bool{})
  []

  axiom{R}
    \equals{Bool{},R}(
      andBool{}(false{}(), T:Bool{}),
      false{}())
  []

  axiom{R}
    \equals{Bool{},R}(
      notBool{}(true{}()), false{}())
  []

  axiom{R}
    \equals{Bool{},R}(
      notBool{}(false{}()), true{}())
  []


endmodule []

module INT

  import BOOL []

  sort Int{} []

  symbol zero{}() : Int{} []

  symbol succ{}(Int{}) : Int{} []

  symbol one{}() : Int{} []

  symbol two{}() : Int{} []

  symbol three{}() : Int{} []

  symbol plusInt{}(Int{}, Int{}) : Int{} []

  symbol minusInt{}(Int{}, Int{}) : Int{} []

  symbol divInt{}(Int{}, Int{}) : Int{} []

  symbol leqInt{}(Int{}, Int{}) : Bool{} []

  symbol neqInt{}(Int{}, Int{}) : Bool{} []

  /* Builtin theories are in this PR
   * https://github.com/kframework/kore/pull/101
   */

  /* TODO:: Functional axioms for all symbols */

  /* TODO:: Constructor axioms. Int has zero and succ as constructors:
   * (No Junk) zero \/ exists x . succ(x)
   * (No Confusion Diff Constructor)
   *    forall x . not(zero /\ succ(x))
   * (No Confusion Same Constructor)
   *    forall x y . succ(x) /\ succ(y) -> succ(x /\ y)
   */

  /* TODO:: Usual axioms about integers. */

endmodule []

module LIST

  sort List{S} []

  symbol nil{S}() : List{S} []

  symbol cons{S}(S, List{S}) : List{S} []

  symbol append{S}(List{S}, List{S}) : List{S} []

  symbol listItem{S}(S) : List{S} []

  /* Builtin theories are in this PR
   * https://github.com/kframework/kore/pull/101
   */

  /* TODO:: Finish axioms.
   * All symbols are functional.
   * List has nil and cons has constructors.
   * listItem builds singleton lists from elements.
   */

endmodule []

module SET

  import BOOL []

  sort Set{S} []

  symbol emptySet{S}() : Set{S} []

  symbol setItem{S}(S) : Set{S} []

  symbol union{S}(Set{S}, Set{S}) : Set{S} []

  symbol inSet{S}(S, Set{S}) : Bool{} []

  /* Builtin theories are in this PR
   * https://github.com/kframework/kore/pull/101
   */

  /* TODO:: Complete axioms.
   * All symbols are funcitonal.
   * (No Junk) emptySet \/ exists S1 S2 . union(S1,S2)
   * We don't need (No Confusion) for sets, because
   * union is not really a constructor.
   * It is a constructor modulo associativity & commutativity.
   * Just add some reasonable axioms.
   */

  axiom{S,R}
    \equals{Set{S},R}(
      union{S}(S:Set{S}, emptySet{S}()),
      S:Set{S}) []


endmodule []

module MAP

  import SET []

  sort Map{S1,S2} []

  symbol bind{S1,S2}(S1,S2) : Map{S1,S2} []

  symbol emp{S1,S2}() : Map{S1,S2} []

  symbol merge{S1,S2}(Map{S1,S2}, Map{S1,S2}) : Map{S1,S2} []

  symbol keys{S1,S2}(Map{S1,S2}) : Set{S1} []

  /* Builtin theories are in this PR
   * https://github.com/kframework/kore/pull/101
   */

  /* See Matching Logic paper, Section 9.2.
   * bind, emp, and keys are functional symbols.
   * merge is partial function:
   * forall m1 m2 . merge(m1, m2) = bottom
   *                \/ exists t . merge(m1, m2) = t
   * merging two binds with the same key gets bottom
   * merge(bind(X,Y),bind(X,Z)) = bottom
   */

endmodule []

module ID

  import INT []

  sort Id{} []

  symbol id{}(Int{}) : Id{} []

  /* id is injective. */

  axiom{}
    \implies{Id{}}(
      \and{Id{}}(id{}(I1:Int{}), id{}(I2:Int{})),
      id{}(\and{Int{}}(I1:Int{}, I2:Int{})))
  []

endmodule []

module CONTEXT

  sort Ctxt{S1,S2} []

  /* Context application are often written as _[_]. */
  symbol app{S1,S2}(Ctxt{S1,S2}, S1) : S2 []

  symbol gamma{S1,S2}(S1,S2) : Ctxt{S1,S2} []

  /* app and gamma are functional symbols. */

  axiom{S1,S2,R}
    \forall{R}(
      C:Ctxt{S1,S2},
      \forall{R}(
        T:S1,
        \exists{R}(
          Z:S2,
          \equals{S2,R}(
            app{S1,S2}(C:Ctxt{S1,S2}, T:S1),
            Z:S2))))
  []

  axiom{S1,S2,R}
    \forall{R}(
      HOLE:S1,
      \forall{R}(
        BODY:S2,
        \exists{R}(
          C:Ctxt{S1,S2},
          \equals{Ctxt{S1,S2},R}(
            gamma{S1,S2}(HOLE:S1, BODY:S2),
            C:Ctxt{S1,S2}))))
  []

  /* Identity context. */
  symbol idctxt{S}() : Ctxt{S,S} []

  /** Axioms about contexts following the monad style.
    * That is, there are two axioms about contexts as follows.
    * (Unit) idctxt[T] = T
    * (Multiplication) C1[C2[T]] = C[T] where C = gamma HOLE . C1[C2[HOLE]]
    */

  axiom{S,R}
    \equals{S,R}(
      app{S,S}(idctxt{S}(), T:S), T:S)
  []

  axiom{S,S1,S2,R}
    \equals{S,R}(
      app{S1,S}(
        C1:Ctxt{S1,S},
        app{S2,S1}(
          C2:Ctxt{S2,S1},
          T:S2)),
      app{S2,S}(
        gamma{S2,S}(
          HOLE:S2,
          app{S1,S}(
            C1:Ctxt{S1,S},
            app{S2,S1}(
              C2:Ctxt{S2,S1},
              HOLE:S2))),
        T:S2))
  []

endmodule []

/** The module of "~>" and "." in K.
  */
module ARROW

  import CONTEXT []

  sort K{} []

  /* The injection function from any sort S to K. */
  symbol asK{S}(S) : K{} []

  /* Two injectivity axioms:
   *   not (asK{S1}(X:S1) /\ asK{S2}(Y:S2)) if S1 and S2 are different
   *   asK{S}(X:S) /\ asK{S}(Y:S) -> asK{S}(X:S /\ Y:S)
   */

  axiom{S1,S2,#R}
    \implies{#R}(
      \not{#R}(
        \equals{#Sort{},#R}(
          #S1:#Sort{},
          #S2:#Sort{})),
      #provable{#R}(
        \not{K{}}(
          \and{K{}}(asK{S1}(X:S1), asK{S2}(Y:S2)))))
  []

  axiom{S}
    \implies{K{}}(
      \and{K{}}(
        asK{S}(X:S),
        asK{S}(Y:S)),
      asK{S}(\and{S}(X:S, Y:S)))
  []

  /* The sort K is basically the sort of assoc lists.
   * The injective function asK constructs singleton lists.
   * Besides that, we have two more symbols. One constructs
   * the empty list while the other append two lists.
   * They are arrow and nothing defined as follows. */

  symbol arrow{}(K{}, K{}) : K{} []

  symbol nothing{}() : K{} []

  /* arrow is assoc */
  axiom{R}
    \equals{K{},R}(
      arrow{}(arrow{}(K1:K{}, K2:K{}), K3:K{}),
      arrow{}(K1:K{}, arrow{}(K2:K{}, K3:K{})))
  []

  /* nothing is the left unit: arrow(nothing, K) = K */
  axiom{R}
    \equals{K{},R}(
      arrow{}(nothing{}(), K:K{}), K:K{})
  []

  /* nothing is the right unit: arrow(K, nothing) = K */
  axiom{R}
    \equals{K{},R}(
      arrow{}(K:K{}, nothing{}()), K:K{})
  []

  /* Contexts about arrows
   * K1 ~> K2 = (gamma HOLE . HOLE ~> K2)[K1]
   * asK(T) = (gamma HOLE . asK(HOLE))[T]
   */

  axiom{R}
    \equals{K{},R}(
      arrow{}(K1:K{}, K2:K{}),
      app{K{},K{}}(
        gamma{K{},K{}}(
          HOLE:K{},
          arrow{}(HOLE:K{}, K2:K{})),
        K1:K{}))
  []

  axiom{S,R}
    \equals{K{},R}(
      asK{S}(T:S),
      app{S,K{}}(
        gamma{S,K{}}(
          HOLE:S,
          asK{S}(HOLE:S)),
        T:S))
  []

  /** Convert contexts to arrows.
    * asK(C[T]) = asK(T) ~> asK(C). */
  axiom{S1,S2,R}
    \equals{K{},R}(
      asK{S2}(app{S1,S2}(C:Ctxt{S1,S2}, T:S1)),
      arrow{}(asK{S1}(T:S1), asK{Ctxt{S1,S2}}(C:Ctxt{S1,S2})))
  []

endmodule []

module IMP-SYNTAX

  import BOOL []

  import INT []

  import LIST []

  import SET []

  import MAP []

  import ID []

  import ARROW []

  import CONTEXT []

  /* syntax AExp ::= ... */

  sort AExp{} []

  /* syntax AExp ::= Int */

  symbol intAsAExp{}(Int{}) : AExp{} []

  /* intAsAExp is injective */

  axiom{}
    \implies{AExp{}}(
      \and{AExp{}}(intAsAExp{}(I1:Int{}), intAsAExp{}(I2:Int{})),
      intAsAExp{}(\and{Int{}}(I1:Int{}, I2:Int{})))
  []

  /* intAsAExp is functional */

  axiom{R}
    \forall{R}(
      I:Int{},
      \exists{R}(
        E:AExp{},
        \equals{AExp{},R}(
          intAsAExp{}(I:Int{}),
          E:AExp{})))
  []

  /* syntax AExp ::= Id */

  symbol idAsAExp{}(Id{}) : AExp{} []

  /* idAsAExp is injective */

  axiom{}
    \implies{AExp{}}(
      \and{AExp{}}(idAsAExp{}(I1:Id{}), idAsAExp{}(I2:Id{})),
      idAsAExp{}(\and{Id{}}(I1:Id{}, I2:Id{})))
  []

  /* idAsAExp is functional */

  axiom{R}
    \forall{R}(
      Id:Id{},
      \exists{R}(
        E:AExp{},
        \equals{AExp{},R}(
          idAsAExp{}(Id:Id{}),
          E:AExp{})))
  []

  /* syntax AExp ::= "-" Int */

  symbol minusAExp{}(Int{}) : AExp{} []

  /* minusAExp is functional */

  axiom{R}
    \forall{R}(
      I:Int{},
      \exists{R}(
        E:AExp{},
        \equals{AExp{},R}(
          minusAExp{}(I:Int{}),
          E:AExp{})))
  []


  /* syntax AExp ::= AExp "/" AExp [strict] */

  symbol divAExp{}(AExp{}, AExp{}) : AExp{}
  [ strict{}() ]

  /* divAExp is functional */

  axiom{R}
    \forall{R}(E1:AExp{}, \forall{R}(E2:AExp{},
      \exists{R}(E:AExp{},
        \equals{AExp{},R}(divAExp{}(E1:AExp{},E2:AExp{}), E:AExp{}))))
  []

  /* (X / Y) = gamma HOLE . (HOLE / Y) [X] */

  axiom{R}
    \equals{AExp{},R}(
      divAExp{}(X:AExp{}, Y:AExp{}),
      app{AExp{},AExp{}}(
        gamma{AExp{},AExp{}}(
          HOLE:AExp{},
          divAExp{}(HOLE:AExp{}, Y:AExp{})),
        X:AExp{}))
  [ strictAxiom{}("divAExp","1") ]

  /* (X / Y) = gamma HOLE . (X / HOLE) [Y] */

  axiom{R}
    \equals{AExp{},R}(
      divAExp{}(X:AExp{}, Y:AExp{}),
      app{AExp{},AExp{}}(
        gamma{AExp{},AExp{}}(
          HOLE:AExp{},
          divAExp{}(X:AExp{}, HOLE:AExp{})),
        Y:AExp{}))
  [ strictAxiom{}("divAExp","2") ]

  /* syntax AExp ::= AExp "+" AExp [strict] */

  symbol plusAExp{}(AExp{}, AExp{}) : AExp{}
  [ strict{}() ]

  /* plusAExp is functional */

  axiom{R}
    \forall{R}(E1:AExp{}, \forall{R}(E2:AExp{},
      \exists{R}(E:AExp{},
        \equals{AExp{},R}(plusAExp{}(E1:AExp{},E2:AExp{}), E:AExp{}))))
  []

  /* (X + Y) = gamma HOLE . (HOLE + Y) [X] */

  axiom{R}
    \equals{AExp{},R}(
      plusAExp{}(X:AExp{}, Y:AExp{}),
      app{AExp{},AExp{}}(
        gamma{AExp{},AExp{}}(
          HOLE:AExp{},
          plusAExp{}(HOLE:AExp{}, Y:AExp{})),
        X:AExp{}))
  [ strictAxiom{}("plusAExp","1") ]

  /* (X + Y) = gamma HOLE . (X + HOLE) [Y] */

  axiom{R}
    \equals{AExp{},R}(
      plusAExp{}(X:AExp{}, Y:AExp{}),
      app{AExp{},AExp{}}(
        gamma{AExp{},AExp{}}(
          HOLE:AExp{},
          plusAExp{}(X:AExp{}, HOLE:AExp{})),
        Y:AExp{}))
  [ strictAxiom{}("plusAExp","2") ]

  /* syntax BExp ::= ... */

  sort BExp{} []

  /* syntax BExp ::= Bool */

  symbol boolAsBExp{}(Bool{}) : BExp{} []

  /* boolAsBExp is injective */

  axiom{}
    \implies{BExp{}}(
      \and{BExp{}}(boolAsBExp{}(B1:Bool{}), boolAsBExp{}(B2:Bool{})),
      boolAsBExp{}(\and{Bool{}}(B1:Bool{}, B2:Bool{})))
  []

  /* boolAsBExp is functional */

  axiom{R}
    \forall{R}(
      B:Bool{},
      \exists{R}(
        E:BExp{},
        \equals{BExp{},R}(
          boolAsBExp{}(B:Bool{}),
          E:BExp{})))
  []

  /* syntax BExp ::= AExp "<=" AExp [seqstrict] */

  symbol leqBExp{}(AExp{}, AExp{}) : BExp{}
  [ seqstrict{}() ]

  /* leqBExp is functional */

  axiom{R}
    \forall{R}(E1:AExp{}, \forall{R}(E2:AExp{},
      \exists{R}(E:BExp{},
        \equals{BExp{},R}(leqBExp{}(E1:AExp{},E2:AExp{}), E:BExp{}))))
  []

  axiom{R}
    \equals{BExp{},R}(
      leqBExp{}(X:AExp{}, Y:AExp{}),
      app{AExp{}, BExp{}}(
        gamma{AExp{}, BExp{}}(
          HOLE:AExp{},
          leqBExp{}(HOLE:AExp{}, Y:AExp{})),
        X:AExp{}))
  [ seqstrictAxiom{}("leqBExp","1") ]

  /* X <= intAsAExp(Y) = (gamma HOLE . X <= intAsAExp(HOLE)) [Y]
     where Y has sort Int.
     This is because Int is the only subsort of AExp that is a KResult.
     However, this information is not in the K module IMP-SYNTAX,
     but in the K module IMP.
   */

  axiom{R}
    \equals{BExp{},R}(
      leqBExp{}(X:AExp{}, intAsAExp{}(Y:Int{})),
      app{Int{}, BExp{}}(
        gamma{Int{}, BExp{}}(
          HOLE:Int{},
          leqBExp{}(X:AExp{}, intAsAExp{}(HOLE:Int{}))),
        Y:Int{}))
  [ seqstrictAxiom{}("leqBExp","2") ]

  /* syntax BExp ::= "!" BExp [strict] */

  symbol notBExp{}(BExp{}) : BExp{}
  [ strict{}() ]

  axiom{R}
    \equals{BExp{},R}(
      notBExp{}(B:BExp{}),
      app{BExp{},BExp{}}(
        gamma{BExp{}, BExp{}}(
          HOLE:BExp{},
          notBExp{}(HOLE:BExp{})),
        B:BExp{}))
  [ strictAxiom{}("notBExp","1") ]

  /* syntax BExp ::= BExp "&&" BExp [strict(1)] */

  symbol andBExp{}(BExp{}, BExp{}) : BExp{}
  [ strict{}("1") ]

  axiom{R}
    \equals{BExp{},R}(
      andBExp{}(X:BExp{}, Y:BExp{}),
      app{BExp{}, BExp{}}(
        gamma{BExp{}, BExp{}}(
          HOLE:BExp{},
          andBExp{}(HOLE:BExp{}, Y:BExp{})),
        X:BExp{}))
  [ strictAxiom{}("andBExp","1") ]


  /* syntax Block ::= ... */

  sort Block{} []

  /* syntax Block ::= "{" "}" */

  symbol emptyBlock{}() : Block{} []

  /* syntax Block ::= "{" Stmt "}" */

  symbol block{}(Stmt{}) : Block{} []

  /* syntax Stmt ::= ... */

  sort Stmt{} []

  /* syntax Stmt ::= Block */

  symbol blockAsStmt{}(Block{}) : Stmt{} []

  /* syntax Stmt ::= Id "=" AExp ";" [strict(2)] */

  symbol asgn{}(Id{}, AExp{}) : Stmt{}
  [ strict{}("2") ]

  axiom{R}
    \equals{Stmt{},R}(
      asgn{}(X:Id{}, E:AExp{}),
      app{AExp{},Stmt{}}(
        gamma{AExp{},Stmt{}}(
          HOLE:AExp{},
          asgn{}(X:Id{}, HOLE:AExp{})),
        E:AExp{}))
  [ strictAxiom{}("asgn","2") ]

  /* syntax Stmt ::= "ite" "(" BExp ")" Block "else" Block [strict(1)] */


  symbol ite{}(BExp{}, Block{}, Block{}) : Stmt{}
  [ strict{}("1") ]

  axiom{R}
    \equals{Stmt{},R}(
      ite{}(B:BExp{}, S1:Block{}, S2:Block{}),
      app{BExp{},Stmt{}}(
        gamma{BExp{},Stmt{}}(
          HOLE:BExp{},
          ite{}(HOLE:BExp{}, S1:Block{}, S2:Block{})),
        B:BExp{}))
  [ strictAxiom{}("ite","1") ]

  /* syntax Stmt ::= "while" "(" BExp ")" Block */

  symbol while{}(BExp{}, Block{}) : Stmt{} []

  /* syntax Stmt ::= Stmt Stmt */

  symbol seq{}(Stmt{}, Stmt{}) : Stmt{} []

  /* syntax Pgm ::= ... */

  sort Pgm{} []

  /* syntax Pgm ::= "int" Ids ";" Stmt
     syntax Ids ::= List{Id, ","}
   */

  symbol pgm{}(List{Id{}}, Stmt{}) : Pgm{} []

endmodule []

module IMP

  import IMP-SYNTAX []

  /* syntax KResult ::= Int | Bool */

  /* KResult provides hints for applying heating and cooling rules.
     These hints are used when we translate seqstrict attributes
     to axioms in Kore.
     We don't need explicit axioms about KResult.
   */


  /* configuration <T> <k> $PGM:Pgm </k> <state> .Map </state> </T> */

  sort Cfg{} []

  symbol cfg{}(TopCell{}) : Cfg{} []

  sort TopCell{} []

  symbol topcell{}(KCell{}, StateCell{}) : TopCell{} []

  sort KCell{} []

  symbol kcell{}(K{}) : KCell{} []

  sort StateCell{} []

  symbol statecell{}(Map{Id{}, Int{}}) : StateCell{} []

  /* In K:
   * rule <k> X:Id => I ... <k>
   *      <state> ... X |-> I ... </state>
   *
   * In Kore:
   * C[kcell((X => I) ~> DOT1)]
   *  [statecell(DOT2 merge X |-> I merge DOT3)]
   */

  axiom{S}
    app{StateCell{},S}(
    app{KCell{},Ctxt{StateCell{},S}}(
      C:Ctxt{KCell{},Ctxt{StateCell{},S}},
      kcell{}(
        arrow{}(
          /* Here AExp is infered from X:Id and I:Int (their least common sort) */
          asK{AExp{}}(idAsAExp{}(X:Id{})),
          asK{AExp{}}(intAsAExp{}(I:Int{}))))),
      statecell{}(
        merge{Id{},Int{}}(
        merge{Id{},Int{}}(
          DOT2:Map{Id{},Int{}},
          bind{Id{},Int{}}(X:Id{}, I:Int{})),
          DOT3:Map{Id{},Int{}})))
  []

  /* rule I1 / I2 => I1 /Int I2 requires I2 =/=Int 0 */

  axiom{S}
    \implies{S}(
      \equals{Bool{},S}(true{}(),
        neqInt{}(I2:Int{}, zero{}())),
      app{AExp{},S}(
        C:Ctxt{AExp{},S},
        \rewrites{AExp{}}(
          divAExp{}(intAsAExp{}(I1:Int{}), intAsAExp{}(I2:Int{})),
          intAsAExp{}(divInt{}(I1:Int{}, I2:Int{})))))
  []

  /* rule I1 + I2 => I1 +Int I2 */

  axiom{S}
    app{AExp{},S}(
      C:Ctxt{AExp{},S},
      \rewrites{AExp{}}(
        plusAExp{}(intAsAExp{}(I1:Int{}), intAsAExp{}(I2:Int{})),
        intAsAExp{}(plusInt{}(I1:Int{}, I2:Int{}))))
  []

  /* In K:
   *   rule -I1 => 0 -Int I1
   */

  axiom{S}
    app{AExp{},S}(
      C:Ctxt{AExp{},S},
      \rewrites{AExp{}}(
        minusAExp{}(I1:Int{}),
        intAsAExp{}(minusInt{}(zero{}(), I1:Int{}))))
  []

  /* In K:
   *   rule I1 <= I2 => I1 <=Int I2
   */

  axiom{S}
    app{BExp{},S}(
      C:Ctxt{BExp{},S},
      \rewrites{BExp{}}(
        leqBExp{}(intAsAExp{}(I1:Int{}), intAsAExp{}(I2:Int{})),
        boolAsBExp{}(leqInt{}(I1:Int{}, I2:Int{}))))
  []

  /* In K:
   *   rule ! T => notBool T
   */

  axiom{S}
    app{BExp{},S}(
      C:Ctxt{BExp{},S},
      \rewrites{BExp{}}(
        notBExp{}(boolAsBExp{}(T:Bool{})),
        boolAsBExp{}(notBool{}(T:Bool{}))))
  []

  /* rule true && B => B */

  axiom{S}
    app{BExp{},S}(
      C:Ctxt{BExp{},S},
      \rewrites{BExp{}}(
        andBExp{}(boolAsBExp{}(true{}()), B:BExp{}),
        B:BExp{}))
  []

  /* rule false && _ => false */

  axiom{S}
    app{BExp{},S}(
      C:Ctxt{BExp{},S},
      \rewrites{BExp{}}(
        andBExp{}(boolAsBExp{}(false{}()), UNDERSCORE:BExp{}),
        boolAsBExp{}(false{}())))
  []


  /* rule {} => . */

  axiom{S}
    app{K{},S}(
      C:Ctxt{K{},S},
      \rewrites{K{}}(asK{Block{}}(emptyBlock{}()), nothing{}()))
  []

  /* rule {S} => S */

  axiom{S}
    app{Stmt{},S}(
      C:Ctxt{Stmt{},S},
      \rewrites{Stmt{}}(
        blockAsStmt{}(block{}(S:Stmt{})),
        S:Stmt{}))
  []

  /* In K:
   *   rule <k> X = I:Int; => . ... </k>
   *        <state> ... X |-> (_ => I) ... </state>
   * In Kore:
   *   C[kcell((X = I => .) ~> DOT1)]
   *    [statecell(DOT2 merge X |-> (UNDERSCORE => I) merge DOT3)]
   */

  axiom{S}
    app{StateCell{},S}(
    app{KCell{},Ctxt{StateCell{},S}}(
      C:Ctxt{KCell{},Ctxt{StateCell{},S}},
      kcell{}(
        arrow{}(
          \rewrites{K{}}(
            asK{Stmt{}}(asgn{}(X:Id{}, intAsAExp{}(I:Int{}))),
            nothing{}()),
          DOT1:K{}))),
      statecell{}(
        merge{Id{},Int{}}(
        merge{Id{},Int{}}(
          DOT2:Map{Id{},Int{}},
          bind{Id{},Int{}}(X:Id{}, \rewrites{Int{}}(UNDERSCORE:Int{}, I:Int{}))),
          DOT3:Map{Id{},Int{}})))
  []



  /* In K:
   *   rule S1:Stmt S2:Stmt => S1 ~> S2 [structural]
   * In Kore:
   *   asK(seq(S1,S2)) => asK(S1) ~> asK(S2)
   */

  axiom{S}
    app{K{},S}(
      C:Ctxt{K{},S},
      \rewrites{K{}}(
        asK{Stmt{}}(seq{}(S1:Stmt{},S2:Stmt{})),
        arrow{}(asK{Stmt{}}(S1:Stmt{}), asK{Stmt{}}(S2:Stmt{}))))
  []


  /* rule if (true) S else _ => S */

  axiom{S}
    app{Stmt{},S}(
      C:Ctxt{Stmt{},S},
      \rewrites{Stmt{}}(
        ite{}(
          boolAsBExp{}(true{}()),
          S:Block{},
          UNDERSCORE:Block{}),
        blockAsStmt{}(S:Block{})))
  []

  /* rule if (false) _ else S => S */

  axiom{S}
    app{Stmt{},S}(
      C:Ctxt{Stmt{},S},
      \rewrites{Stmt{}}(
        ite{}(
          boolAsBExp{}(false{}()),
          UNDERSCORE:Block{},
          S:Block{}),
        blockAsStmt{}(S:Block{})))
  []

  /* rule while (B) S => if (B) {S while (B) S} else {} [structural] */

  axiom{S}
    app{Stmt{},S}(
      C:Ctxt{Stmt{},S},
      \rewrites{Stmt{}}(
        while{}(B:BExp{}, S:Block{}),
        ite{}(
          B:BExp{},
          block{}(
            seq{}(blockAsStmt{}(S:Block{}),
                  while{}(B:BExp{}, S:Block{}))),
          emptyBlock{}())))
  []



  /* rule <k> int (X,Xs => Xs);_ </k>
          <state> Rho:Map (.Map => X |-> 0) </state>
     requires notBool (X in keys(Rho))
   */

  axiom{S}
    \implies{S}(
      \equals{Bool{},S}(
        notBool{}(inSet{Id{}}(X:Id{}, keys{Id{},Int{}}(Rho:Map{Id{},Int{}}))),
        true{}()),
      app{StateCell{},S}(
      app{KCell{},Ctxt{StateCell{},S}}(
        C:Ctxt{KCell{},Ctxt{StateCell{},S}},
        kcell{}(
          asK{Pgm{}}(
            pgm{}(
              \rewrites{List{Id{}}}(
                cons{Id{}}(X:Id{}, Xs:List{Id{}}),
                Xs:List{Id{}}),
              UNDERSCORE:Stmt{})))),
        statecell{}(
          merge{Id{},Int{}}(
            Rho:Map{Id{},Int{}},
            \rewrites{Map{Id{},Int{}}}(
              emp{Id{},Int{}}(),
              bind{Id{},Int{}}(X:Id{}, zero{}()))))))
  []


  /* rule int .Ids; S => S */

  /* From type inference, the only common sort of the l.h.s. (Pgm)
   * and the r.h.s. (Stmt) is K, so this rewrite rule has sort K.
   */
  axiom{S}
    app{K{},S}(
      C:Ctxt{K{},S},
      \rewrites{K{}}(
        asK{Pgm{}}(pgm{}(nil{Id{}}(), S:Stmt{})),
        asK{Stmt{}}(S:Stmt{})))
  []



endmodule []
